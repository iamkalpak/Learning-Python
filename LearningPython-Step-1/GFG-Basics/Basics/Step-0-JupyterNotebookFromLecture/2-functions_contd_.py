# -*- coding: utf-8 -*-
"""Copy of functions Contd .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GeBwxPzPGqWoZ8--fI-ISThd6r0T78FN
"""

def multiply(a,b):
  return a*b
a=int(input("enter first number"))
b=int(input("enter second number"))
multiply(a,b)

# Ques 1 : Temperature Conversion

# usage- WAP to convert celsius into fahrenheit and vice versa

def convert_temp(temp,unit):

  if unit=="c":
    return (temp *9/5 +32)  #celsius to Fahrenheit
  elif unit=="F":
    return (temp-32)*5/9  # Fahrenheit to Celsius
  else:
    return None
print(convert_temp(68,"F"))
print(convert_temp(77,"c"))

# Ques 2 - Password strength Checker

def is_strong_pass(password):
  if len(password)<8:
    return False
  if not any(char.isdigit() for char in password):
    return False
  if not any(char.islower() for char in password):
    return False
  if not any(char.isupper() for char in password):
    return False
  if not any(char in "!@#$%^&*_+-" for char in password):
    return False
  return True

# calling my function

print(is_strong_pass("Paracetamol1234##*$"))
print(is_strong_pass("Paracetamol12#"))

# Ques 3 : Calculate the Total cost of items in a shopping cart

def calculate_total(cart):
  total_cost=0
  for i in cart:
    total_cost+=i['price']*i["quantity"]
  return total_cost


#example cart

cart=[
    {"name":"apple","price":50,"quantity":5},  #250
    {"name":"banana","price":30,"quantity":3}, # 90
    {"name":"orange","price":40,"quantity":2} #80

    #total=420/-
]

#calling the function

total_cost=calculate_total(cart)
print("Total Price of the Fruits are", total_cost)

# Ques 4 Check if a string is a Palindrome or not

def palindrome(n):
  n=n.lower().replace(" ","")
  c=(n==n[::-1])
  if c==True:
    return "Palindrome"
  else:
    return "Not a Palindrome"

print(palindrome("NooN civiC nooN"))
print(palindrome("moon"))

# Ques 5 : Calculate the factorial of a number using funtions

def fact(num):
    if num < 0:
        return "Factorial is not defined."
    elif num  ==0 or num == 1:
        return 1
    else:
        result = 1
        for i in range(2, num + 1):
            result *= i
        return result
number = int(input("Enter a number to find its factorial: "))
print(fact(number))

# lamda Functions

"""Lambda Functions in Python:

A lambda expression in Python is like a mini function that doesn’t need a name. It’s a one-liner used when you want to do something quickly without going through the formalities of defining a full function.

Analogy:

A lambda is like a vending machine: you press a button (give input), and it instantly gives you a snack (output). No need for a chef (full function)! 🍫
"""

#syntax of lambda function

lambda arguremnts: expression

# add 2 numbers

def addition(a,b):
  return a+b

addition(3,4)

multiplication=lambda a,b: a*b
print(multiplication(5,6))

def even(num):
  if num%2==0:
    return True
  else:
    return False

even(24)

iseven=lambda num: num%2==0
iseven(24)

addition=lambda a,b,c,d: a+b+c+d
addition(5,6,10,5)

"""## The map() Function in Python


The map() function takes a function and a list (or any iterable) and applies that function to every item in the list, giving you a new list with the results.


map() is like a DJ playing remixes: you give the DJ (function) a playlist (list), and they remix every song (apply the function) into a new playlist.
1,2,3 LETS ROCKK GEEEKS !!! bold text
"""

def cube(x):
  return x*x*x

cube(10)

def square(x):
  return x*x

numbers=[1,2,3,4,5,6,7,8,9,10]
print(list(map(cube,numbers)))
print(list(map(square,numbers)))

numbers=[1,2,3,4,5,6,7,8,9,10]
list(map(lambda x: x*x*x , numbers ))

list1=[1,2,3,4,5]
list2=[6,7,8,9,10]
added_numbers=list(map(lambda x,y:x+y,list1,list2))
print(added_numbers)

words= ["apple","banana","cheery","papaya","kiwi"]
upper_words=list(map(str.upper,words))
print(upper_words)

words= ["apple","banana","cheery","papaya","kiwi"]
upper_words=list(map(lambda x: x.upper(),words))
print(upper_words)



"""## The filter() Function in Python
The filter() function helps you pick only the items from a list (or iterable) that meet a certain condition. You give it a function (the condition) and a list, and it filters out the items that don’t pass the test.

filter() is like a bouncer at a club: it only lets in the people (list items) who match the dress code (pass the condition). The rest are turned away! **🕺🚫**
"""



list1=[1,2,3,4,5,6,7,8,9,10]

result=list(filter(lambda x : x<5,list1))
print(result)

list1=[1,2,3,4,5,6,7,8,9,10]

result=list(filter(lambda x : x<8 and x%2==0,list1))
print(result)

## filter () to check if the age is greater than 25 in the dictionary

people=[
    {"name": "Rohan","age":12},
    {"name": "Karan","age":30},
    {"name": "Mohit","age":43},
    {"name": "Nisha","age":18},
    {"name": "Swati","age":27}
]

def age_greater_than_25(person):
  return person["age"]>25

list(filter(age_greater_than_25,people))

apple=aelpp